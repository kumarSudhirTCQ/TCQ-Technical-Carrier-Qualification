SOLID Coding in Python
----------------------
Reference:-
-----------
>> https://towardsdatascience.com/solid-coding-in-python-1281392a6a94


The principle of SOLID coding is an acronym originated by Robert C. Martin, and it stands for five different conventions of coding.

If you follow, these principles you can improve the reliability of your code by working on its structure and its logical consistency.

The SOLID principles are:
S - SRP: Single-Responsibility Principle
O - OCP: Open-Closed Principle
L - LSP: Liskov Substitution Principle
I - ISP: Interface Segregation Principle
D - DIP: Dependency inversion Principle

Note:
These five principles are not a specific ordered list (do this, then that, etc) but a collection of best practices, developed through the decades. 
They are gathered into an acronym, as a mnemonic vehicle to be remembered, similar to others in computer science, e.g. 
    DRY: Don’t Repeat Yourself; 
    KISS: Keep It Small and Simple; 
as pieces of accumulated wisdom. A little side note, the acronym was created years after these five principles were set together.

In general, the SOLID principles are basic learning steps for every code developer but are usually ignored by those who does not 
consider the highest quality of code their absolute priority.
However, as a developer, it is seen that following these principles is beneficial. Specifically, it improves testability, reduces technical debts, 
and the time needed to implement changes when new requirements from clients/stockholders arise.

Usually, the SOLID principles are applied in the context of object-oriented design (i.e.: Python’s classes), 
but I believe they are valid regardless of the level, and I would like to keep the example and explanation here, 
to a level for an “advanced beginner”, overseeing formal definition.


###-------------------------------------------------------------
# SOLID Principle1 - S -> SRP -> Single-responsibility principle
###-------------------------------------------------------------

Aim: A class/module/package/Function should have one, and only one, reason to change.

In other words, every component of your code (in general a class, but also a function) should have one and only one responsibility. 
As a consequence of that, there should be only a reason to change it.

But Too often we see a piece of code that takes care of an entire process all at once. I.e., 
A function that loads data, modifies and, plots them, all before returning its result.

Let’s take a simpler example, where we have a list of number L = [n1, n2, …, nx] and we compute some mathematical functions to this list. 
For example, compute the mean, median, etc.


1st Approach:- 
--------------
- to have a single function doing all the work:

#####------------Code goes below-------------------
import numpy as np

def math_operations(list_):
    # Compute Average
    print(f"the mean is {np.mean(list_)}")
    # Compute Max
    print(f"the max is {np.max(list_)}") 

math_operations(list_ = [1,2,3,4,5])

######------Below are the result of above code------------
# the mean is 3.0
# the max is 5

the above code serve our purpose but approach is bad


2nd Approach: - 
---------------
- The first thing we should do, to make this more SRP compliant, is to split the function math_operations into atomic functions! 
  Thus, when a function’s responsibility cannot be divided into more subparts.

- The second step is to make a single function (or class), generically named, “main”. 
This will call all the other functions one-by-one in a step-to-step process.


###-----Code Goes Below-------------------------------

def get_mean(list_):
    '''Compute Mean'''
    print(f"the mean is {np.mean(list_)}") 

def get_max(list_):
    '''Compute Max'''
    print(f"the max is {np.max(list_)}") 

def main(list_): 
    # Compute Average
    get_mean(list_)
    # Compute Max
    get_max(list_)

main([1,2,3,4,5])

######------Below are the result of above code------------
# the mean is 3.0
# the max is 5

Now, you would only have one single reason to change each function connected with “main”.

The result of this simple action is that now:
- It is easier to localize errors. Any error in execution will point out to a smaller section of your code, accelerating your debug phase.

- Any part of the code is reusable in other section of your code.

- Moreover and, often overlooked, is that it is easier to create testing for each function of your code. 
  Side note on testing: You should write tests before you actually write the script. 
  But, this is often ignored in favour of creating some nice result to be shown to the stakeholders instead.

This is already a much bigger improvement with respect to the first code example. 
But, having created a “main” and calling functions with single responsibility is not the full fulfilment of the SR principle.
Indeed, our “main” has many reasons to be changed. The class is actually fragile and hard to maintain.


To solve that, let’s introduce the next principle:


###-------------------------------------------------------------
# SOLID Principle 2 - O -> OCP -> open/close principle
###-------------------------------------------------------------

Aim: Software entities should be open for extension but closed for modification

In other words: You should not need to modify the code you have already written to accommodate new functionality, but simply add what you now need.

This does not mean that you cannot change your code when the code premises needs to be modified, 
but that if you need to add new functions similar to the one present, 
you should not require to change other parts of the code.

To clarify this point let’s refer to the example we saw earlier. 
If we wanted to add new functionality, for example, compute the median, 
we should have created a new method function and add its invocation to “main”. 
That would have added an extension but also modified the main.

We can solve this by turning all the functions we wrote into subclasses of a class. 

In this case, I have created an abstract class called “Operations” with an abstract method “get_operation”. 
(Abstract classes are generally an advanced topic. If you don’t know what an abstract class is, you can run the following code even without).

Now, all the old functions, now classes are called by the __subclasses__() method. 
That will find all classes inheriting from Operations and operate the function “operations” that is present in all sub-classes.

Ex 1:

import numpy as np
from abc import ABC, abstractmethod

class Operations(ABC):
    '''Operations'''
    @abstractmethod
    def operation():
        pass

class Mean(Operations):
    '''Compute Max'''
    def operation(list_):
        print(f"The mean is {np.mean(list_)}") 

class Max(Operations):
    '''Compute Max'''
    def operation(list_):
        print(f"The max is {np.max(list_)}") 

class Main:
    '''Main'''
    @abstractmethod
    def get_operations(list_):
        # __subclasses__ will found all classes inheriting from Operations
        for operation in Operations.__subclasses__():
            operation.operation(list_)


if __name__ == "__main__":
    Main.get_operations([1,2,3,4,5])
# The mean is 3.0
# The max is 5


Ex 2:-
from abc import ABC, abstractmethod

class Operations(ABC):
    
    '''Operations'''
    @abstractmethod
    def operation():
        pass

class Main:
    
    '''Main'''
    @abstractmethod
    def get_operations(val1, val2, op):
            return op.operation(val1, val2)
        
'''addition of two number'''
class Add(Operations):
    
    '''Calculate addition'''
    def operation(num1, num2):
        return num1 + num2 

class Sub(Operations):
    
    '''Calculate substraction'''
    def operation(num1, num2):
        return num1 - num2

if __name__ == "__main__":
    result = Main.get_operations(10, 20, Sub)
    print(result)
    

If now we want to add a new operation e.g.: median, we will only need to add a class “Median” inheriting from the class “Operations”. 
The newly formed sub-class will be immediately picked up by __subclasses__() and no modification in any other part of the code needs to happen.

The result is a very flexible class, that requires minimum time to be maintained.







